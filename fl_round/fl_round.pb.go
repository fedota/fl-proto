// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.0
// source: fl_round/fl_round.proto

package fl_round

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Type of Fl Data
type Type int32

const (
	Type_FL_FILES Type = 0
	Type_FL_INT   Type = 1
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "FL_FILES",
		1: "FL_INT",
	}
	Type_value = map[string]int32{
		"FL_FILES": 0,
		"FL_INT":   1,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_fl_round_fl_round_proto_enumTypes[0].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_fl_round_fl_round_proto_enumTypes[0]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_fl_round_fl_round_proto_rawDescGZIP(), []int{0}
}

// Client CheckIn Ping
// Currently, only a string message
type CheckInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CheckInRequest) Reset() {
	*x = CheckInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fl_round_fl_round_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckInRequest) ProtoMessage() {}

func (x *CheckInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fl_round_fl_round_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckInRequest.ProtoReflect.Descriptor instead.
func (*CheckInRequest) Descriptor() ([]byte, []int) {
	return file_fl_round_fl_round_proto_rawDescGZIP(), []int{0}
}

func (x *CheckInRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// FL Data: For communication between client and selector
type FlData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chunk       []byte `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	IntVal      int64  `protobuf:"varint,2,opt,name=intVal,proto3" json:"intVal,omitempty"`
	Type        Type   `protobuf:"varint,3,opt,name=type,proto3,enum=Type" json:"type,omitempty"`
	IsLastChunk bool   `protobuf:"varint,4,opt,name=isLastChunk,proto3" json:"isLastChunk,omitempty"`
	FilePath    string `protobuf:"bytes,5,opt,name=filePath,proto3" json:"filePath,omitempty"`
}

func (x *FlData) Reset() {
	*x = FlData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fl_round_fl_round_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlData) ProtoMessage() {}

func (x *FlData) ProtoReflect() protoreflect.Message {
	mi := &file_fl_round_fl_round_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlData.ProtoReflect.Descriptor instead.
func (*FlData) Descriptor() ([]byte, []int) {
	return file_fl_round_fl_round_proto_rawDescGZIP(), []int{1}
}

func (x *FlData) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *FlData) GetIntVal() int64 {
	if x != nil {
		return x.IntVal
	}
	return 0
}

func (x *FlData) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_FL_FILES
}

func (x *FlData) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

func (x *FlData) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

var File_fl_round_fl_round_proto protoreflect.FileDescriptor

var file_fl_round_fl_round_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x2f, 0x66, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x0e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x06, 0x46, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x19,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x2a, 0x20, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x32, 0x54, 0x0a, 0x07, 0x46, 0x6c, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x12,
	0x0f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x07, 0x2e, 0x46, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x1e, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x07, 0x2e, 0x46, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x07, 0x2e, 0x46, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x28, 0x01, 0x42,
	0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x66, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fl_round_fl_round_proto_rawDescOnce sync.Once
	file_fl_round_fl_round_proto_rawDescData = file_fl_round_fl_round_proto_rawDesc
)

func file_fl_round_fl_round_proto_rawDescGZIP() []byte {
	file_fl_round_fl_round_proto_rawDescOnce.Do(func() {
		file_fl_round_fl_round_proto_rawDescData = protoimpl.X.CompressGZIP(file_fl_round_fl_round_proto_rawDescData)
	})
	return file_fl_round_fl_round_proto_rawDescData
}

var file_fl_round_fl_round_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fl_round_fl_round_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_fl_round_fl_round_proto_goTypes = []interface{}{
	(Type)(0),              // 0: Type
	(*CheckInRequest)(nil), // 1: CheckInRequest
	(*FlData)(nil),         // 2: FlData
}
var file_fl_round_fl_round_proto_depIdxs = []int32{
	0, // 0: FlData.type:type_name -> Type
	1, // 1: FlRound.CheckIn:input_type -> CheckInRequest
	2, // 2: FlRound.Update:input_type -> FlData
	2, // 3: FlRound.CheckIn:output_type -> FlData
	2, // 4: FlRound.Update:output_type -> FlData
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_fl_round_fl_round_proto_init() }
func file_fl_round_fl_round_proto_init() {
	if File_fl_round_fl_round_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fl_round_fl_round_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fl_round_fl_round_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fl_round_fl_round_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fl_round_fl_round_proto_goTypes,
		DependencyIndexes: file_fl_round_fl_round_proto_depIdxs,
		EnumInfos:         file_fl_round_fl_round_proto_enumTypes,
		MessageInfos:      file_fl_round_fl_round_proto_msgTypes,
	}.Build()
	File_fl_round_fl_round_proto = out.File
	file_fl_round_fl_round_proto_rawDesc = nil
	file_fl_round_fl_round_proto_goTypes = nil
	file_fl_round_fl_round_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FlRoundClient is the client API for FlRound service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlRoundClient interface {
	CheckIn(ctx context.Context, opts ...grpc.CallOption) (FlRound_CheckInClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (FlRound_UpdateClient, error)
}

type flRoundClient struct {
	cc grpc.ClientConnInterface
}

func NewFlRoundClient(cc grpc.ClientConnInterface) FlRoundClient {
	return &flRoundClient{cc}
}

func (c *flRoundClient) CheckIn(ctx context.Context, opts ...grpc.CallOption) (FlRound_CheckInClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FlRound_serviceDesc.Streams[0], "/FlRound/CheckIn", opts...)
	if err != nil {
		return nil, err
	}
	x := &flRoundCheckInClient{stream}
	return x, nil
}

type FlRound_CheckInClient interface {
	Send(*CheckInRequest) error
	Recv() (*FlData, error)
	grpc.ClientStream
}

type flRoundCheckInClient struct {
	grpc.ClientStream
}

func (x *flRoundCheckInClient) Send(m *CheckInRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flRoundCheckInClient) Recv() (*FlData, error) {
	m := new(FlData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flRoundClient) Update(ctx context.Context, opts ...grpc.CallOption) (FlRound_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FlRound_serviceDesc.Streams[1], "/FlRound/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &flRoundUpdateClient{stream}
	return x, nil
}

type FlRound_UpdateClient interface {
	Send(*FlData) error
	CloseAndRecv() (*FlData, error)
	grpc.ClientStream
}

type flRoundUpdateClient struct {
	grpc.ClientStream
}

func (x *flRoundUpdateClient) Send(m *FlData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flRoundUpdateClient) CloseAndRecv() (*FlData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FlData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlRoundServer is the server API for FlRound service.
type FlRoundServer interface {
	CheckIn(FlRound_CheckInServer) error
	Update(FlRound_UpdateServer) error
}

// UnimplementedFlRoundServer can be embedded to have forward compatible implementations.
type UnimplementedFlRoundServer struct {
}

func (*UnimplementedFlRoundServer) CheckIn(FlRound_CheckInServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckIn not implemented")
}
func (*UnimplementedFlRoundServer) Update(FlRound_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterFlRoundServer(s *grpc.Server, srv FlRoundServer) {
	s.RegisterService(&_FlRound_serviceDesc, srv)
}

func _FlRound_CheckIn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlRoundServer).CheckIn(&flRoundCheckInServer{stream})
}

type FlRound_CheckInServer interface {
	Send(*FlData) error
	Recv() (*CheckInRequest, error)
	grpc.ServerStream
}

type flRoundCheckInServer struct {
	grpc.ServerStream
}

func (x *flRoundCheckInServer) Send(m *FlData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flRoundCheckInServer) Recv() (*CheckInRequest, error) {
	m := new(CheckInRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FlRound_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlRoundServer).Update(&flRoundUpdateServer{stream})
}

type FlRound_UpdateServer interface {
	SendAndClose(*FlData) error
	Recv() (*FlData, error)
	grpc.ServerStream
}

type flRoundUpdateServer struct {
	grpc.ServerStream
}

func (x *flRoundUpdateServer) SendAndClose(m *FlData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flRoundUpdateServer) Recv() (*FlData, error) {
	m := new(FlData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FlRound_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FlRound",
	HandlerType: (*FlRoundServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckIn",
			Handler:       _FlRound_CheckIn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _FlRound_Update_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fl_round/fl_round.proto",
}
