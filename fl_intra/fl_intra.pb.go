// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.0
// source: fl_intra/fl_intra.proto

package fl_intra

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Sending client count to Coordinator
type ClientCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ClientCount) Reset() {
	*x = ClientCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fl_intra_fl_intra_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCount) ProtoMessage() {}

func (x *ClientCount) ProtoReflect() protoreflect.Message {
	mi := &file_fl_intra_fl_intra_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCount.ProtoReflect.Descriptor instead.
func (*ClientCount) Descriptor() ([]byte, []int) {
	return file_fl_intra_fl_intra_proto_rawDescGZIP(), []int{0}
}

func (x *ClientCount) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ClientCount) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SelectorId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SelectorId) Reset() {
	*x = SelectorId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fl_intra_fl_intra_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectorId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectorId) ProtoMessage() {}

func (x *SelectorId) ProtoReflect() protoreflect.Message {
	mi := &file_fl_intra_fl_intra_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectorId.ProtoReflect.Descriptor instead.
func (*SelectorId) Descriptor() ([]byte, []int) {
	return file_fl_intra_fl_intra_proto_rawDescGZIP(), []int{1}
}

func (x *SelectorId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fl_intra_fl_intra_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_fl_intra_fl_intra_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_fl_intra_fl_intra_proto_rawDescGZIP(), []int{2}
}

type FlClientStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accepted bool `protobuf:"varint,1,opt,name=accepted,proto3" json:"accepted,omitempty"`
}

func (x *FlClientStatus) Reset() {
	*x = FlClientStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fl_intra_fl_intra_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlClientStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlClientStatus) ProtoMessage() {}

func (x *FlClientStatus) ProtoReflect() protoreflect.Message {
	mi := &file_fl_intra_fl_intra_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlClientStatus.ProtoReflect.Descriptor instead.
func (*FlClientStatus) Descriptor() ([]byte, []int) {
	return file_fl_intra_fl_intra_proto_rawDescGZIP(), []int{3}
}

func (x *FlClientStatus) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

var File_fl_intra_fl_intra_proto protoreflect.FileDescriptor

var file_fl_intra_fl_intra_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x2f, 0x66, 0x6c, 0x5f, 0x69, 0x6e,
	0x74, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a, 0x0b, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1c,
	0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x07, 0x0a, 0x05,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x0a, 0x0e, 0x46, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x32, 0x75, 0x0a, 0x07, 0x46, 0x6c, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x12, 0x34,
	0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x0f, 0x2e, 0x46, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x1b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x3c, 0x0a, 0x14, 0x46, 0x4c,
	0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x10, 0x47, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x06,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x66, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fl_intra_fl_intra_proto_rawDescOnce sync.Once
	file_fl_intra_fl_intra_proto_rawDescData = file_fl_intra_fl_intra_proto_rawDesc
)

func file_fl_intra_fl_intra_proto_rawDescGZIP() []byte {
	file_fl_intra_fl_intra_proto_rawDescOnce.Do(func() {
		file_fl_intra_fl_intra_proto_rawDescData = protoimpl.X.CompressGZIP(file_fl_intra_fl_intra_proto_rawDescData)
	})
	return file_fl_intra_fl_intra_proto_rawDescData
}

var file_fl_intra_fl_intra_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_fl_intra_fl_intra_proto_goTypes = []interface{}{
	(*ClientCount)(nil),    // 0: ClientCount
	(*SelectorId)(nil),     // 1: SelectorId
	(*Empty)(nil),          // 2: Empty
	(*FlClientStatus)(nil), // 3: FlClientStatus
}
var file_fl_intra_fl_intra_proto_depIdxs = []int32{
	0, // 0: FlIntra.ClientCountUpdate:input_type -> ClientCount
	1, // 1: FlIntra.SelectorAggregationComplete:input_type -> SelectorId
	2, // 2: FLGoalCountBroadcast.GoalCountReached:input_type -> Empty
	3, // 3: FlIntra.ClientCountUpdate:output_type -> FlClientStatus
	2, // 4: FlIntra.SelectorAggregationComplete:output_type -> Empty
	2, // 5: FLGoalCountBroadcast.GoalCountReached:output_type -> Empty
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_fl_intra_fl_intra_proto_init() }
func file_fl_intra_fl_intra_proto_init() {
	if File_fl_intra_fl_intra_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fl_intra_fl_intra_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fl_intra_fl_intra_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectorId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fl_intra_fl_intra_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fl_intra_fl_intra_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlClientStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fl_intra_fl_intra_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_fl_intra_fl_intra_proto_goTypes,
		DependencyIndexes: file_fl_intra_fl_intra_proto_depIdxs,
		MessageInfos:      file_fl_intra_fl_intra_proto_msgTypes,
	}.Build()
	File_fl_intra_fl_intra_proto = out.File
	file_fl_intra_fl_intra_proto_rawDesc = nil
	file_fl_intra_fl_intra_proto_goTypes = nil
	file_fl_intra_fl_intra_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FlIntraClient is the client API for FlIntra service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FlIntraClient interface {
	ClientCountUpdate(ctx context.Context, in *ClientCount, opts ...grpc.CallOption) (*FlClientStatus, error)
	SelectorAggregationComplete(ctx context.Context, in *SelectorId, opts ...grpc.CallOption) (*Empty, error)
}

type flIntraClient struct {
	cc grpc.ClientConnInterface
}

func NewFlIntraClient(cc grpc.ClientConnInterface) FlIntraClient {
	return &flIntraClient{cc}
}

func (c *flIntraClient) ClientCountUpdate(ctx context.Context, in *ClientCount, opts ...grpc.CallOption) (*FlClientStatus, error) {
	out := new(FlClientStatus)
	err := c.cc.Invoke(ctx, "/FlIntra/ClientCountUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flIntraClient) SelectorAggregationComplete(ctx context.Context, in *SelectorId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/FlIntra/SelectorAggregationComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlIntraServer is the server API for FlIntra service.
type FlIntraServer interface {
	ClientCountUpdate(context.Context, *ClientCount) (*FlClientStatus, error)
	SelectorAggregationComplete(context.Context, *SelectorId) (*Empty, error)
}

// UnimplementedFlIntraServer can be embedded to have forward compatible implementations.
type UnimplementedFlIntraServer struct {
}

func (*UnimplementedFlIntraServer) ClientCountUpdate(context.Context, *ClientCount) (*FlClientStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientCountUpdate not implemented")
}
func (*UnimplementedFlIntraServer) SelectorAggregationComplete(context.Context, *SelectorId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectorAggregationComplete not implemented")
}

func RegisterFlIntraServer(s *grpc.Server, srv FlIntraServer) {
	s.RegisterService(&_FlIntra_serviceDesc, srv)
}

func _FlIntra_ClientCountUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlIntraServer).ClientCountUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FlIntra/ClientCountUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlIntraServer).ClientCountUpdate(ctx, req.(*ClientCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlIntra_SelectorAggregationComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectorId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlIntraServer).SelectorAggregationComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FlIntra/SelectorAggregationComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlIntraServer).SelectorAggregationComplete(ctx, req.(*SelectorId))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlIntra_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FlIntra",
	HandlerType: (*FlIntraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientCountUpdate",
			Handler:    _FlIntra_ClientCountUpdate_Handler,
		},
		{
			MethodName: "SelectorAggregationComplete",
			Handler:    _FlIntra_SelectorAggregationComplete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fl_intra/fl_intra.proto",
}

// FLGoalCountBroadcastClient is the client API for FLGoalCountBroadcast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FLGoalCountBroadcastClient interface {
	GoalCountReached(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type fLGoalCountBroadcastClient struct {
	cc grpc.ClientConnInterface
}

func NewFLGoalCountBroadcastClient(cc grpc.ClientConnInterface) FLGoalCountBroadcastClient {
	return &fLGoalCountBroadcastClient{cc}
}

func (c *fLGoalCountBroadcastClient) GoalCountReached(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/FLGoalCountBroadcast/GoalCountReached", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FLGoalCountBroadcastServer is the server API for FLGoalCountBroadcast service.
type FLGoalCountBroadcastServer interface {
	GoalCountReached(context.Context, *Empty) (*Empty, error)
}

// UnimplementedFLGoalCountBroadcastServer can be embedded to have forward compatible implementations.
type UnimplementedFLGoalCountBroadcastServer struct {
}

func (*UnimplementedFLGoalCountBroadcastServer) GoalCountReached(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoalCountReached not implemented")
}

func RegisterFLGoalCountBroadcastServer(s *grpc.Server, srv FLGoalCountBroadcastServer) {
	s.RegisterService(&_FLGoalCountBroadcast_serviceDesc, srv)
}

func _FLGoalCountBroadcast_GoalCountReached_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FLGoalCountBroadcastServer).GoalCountReached(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FLGoalCountBroadcast/GoalCountReached",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FLGoalCountBroadcastServer).GoalCountReached(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _FLGoalCountBroadcast_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FLGoalCountBroadcast",
	HandlerType: (*FLGoalCountBroadcastServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoalCountReached",
			Handler:    _FLGoalCountBroadcast_GoalCountReached_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fl_intra/fl_intra.proto",
}
